{"name":"Tim","tagline":"Web application for managing virtual images to be deployed in the cloud","body":"Tim is a Rails Engine responsible for Cloud image management.  It\r\nallows clients to create, delete and upload images to a multitude of\r\nCloud providers.  Tim builds on top of Imagefactoryâ€™s cloud\r\nabstraction layer.\r\n\r\nAdding the ability for clients to store meta-data (used for searching\r\nand sorting) as well as versioning and support for access control.\r\nTim wraps all this up in a clean, simply RESTful API.\r\n\r\nYou can read the full presentation [here](http://www.aeolusproject.org/docs/presentations/2012-nov-conference/tim.odp).\r\n\r\n## Configuration\r\n\r\n### Securing Image Factory requests\r\n\r\nIt is possible to secure Image Factory requests using 2 Legged OAuth.  To use 2\r\nLegged OAuth you must set the OAuth consumer key, consumer secret and url in the\r\nTim::ImageFactory::Base.config.\r\n\r\n#### Example:\r\n```ruby\r\n  oauth_config = {:consumer_key => \"mock-key\",\r\n                  :consumer_secret => \"mock-secret\",\r\n                  :site => \"http://localhost:8075/imagefactory/\"}\r\n  Tim::ImageFactory::Base.config = oauth_config\r\n```\r\n## Running Tests\r\n\r\n[<img src=\"https://secure.travis-ci.org/aeolus-incubator/tim.png\"\r\nalt=\"Build Status\" />](http://travis-ci.org/aeolus-incubator/tim])\r\n\r\nTests are run from the project root directory.  But are run in the\r\ncontext of the dummy app located under test/dummy.  In order to run\r\nthe tests you must first setup dummy app database.\r\n\r\n```ruby\r\n  rake db:setup; rake -f test/dummy/Rakefile test:prepare\r\n```\r\n\r\nOnce you have done this cd to the project root and run the following:\r\n\r\n```ruby\r\n  rake spec\r\n```\r\n\r\n## Running the Dummy app\r\n\r\nThis will allow you to runn the commands below to test out the engine\r\nin isolation (if mounted in another application, the main difference\r\nwill just be where the engine gets mounted, so adjust your url\r\naccordingly).\r\n\r\ncd test/dummy; rails s\r\n\r\n## Generating State Machines Images\r\n\r\nFrom test/dummy run:\r\n\r\n```ruby\r\n  rake state_machine:draw FILE=../../app/models/tim/target_image.rb CLASS=Tim::TargetImage\r\n  rake state_machine:draw FILE=../../app/models/tim/provider_image.rb CLASS=Tim::ProviderImage\r\n```\r\n\r\n## Contributing\r\n\r\nWe encourage you to contribute to Tim.  We are open to new ideas and\r\nfeatures (especially if you offer to implement them!) as well as\r\n{Github issues}[https://github.com/aeolus-incubator/tim/issues/] to point\r\nus at any bugs that may be encountered.\r\n\r\n### General\r\n\r\n* We use {Github issues}[https://github.com/aeolus-incubator/tim/issues/]\r\n  to track our features and bugs.\r\n* Want to paste some code or output? Put \\`\\`\\` on a line above and\r\n  below your code/output. See {Github documentation's}[https://help.github.com/articles/github-flavored-markdown]\r\n  <b>Fenced Code Blocks</b> for details.\r\n* Please use {pull requests}[https://help.github.com/articles/using-pull-requests]\r\n  to submit code, whether for implementation of a new feature or for a bug fix.\r\n* If you submit a pull request that doesn't have a test to go with it\r\n  there is less chance we will merge it.\r\n\r\n### Features\r\n\r\nHave an idea for a feature you want to implement (or would like us to\r\nconsider implementing when time allows)?  Simply submit a new\r\nissue[https://github.com/aeolus-incubator/tim/issues/] describing the\r\nfeature in sufficient detail to enable someone to consider\r\nimplementing it.  Ideally this would be in a format focusing on:\r\n\r\n* Who would be the user of this feature?\r\n* How would the feature be used (this could be a workflow, api\r\n  example, etc)?\r\n* What need does it fill (in other words, why does the user want/need\r\n  to do the described task)?\r\n\r\nIf you like, you may use the Connextra format, but it is not strictly\r\nrequired.  For reference, that format is:\r\n\r\n<em>In order to [benefit], a [stakeholder] wants to [feature].</em>\r\n\r\n### Bug Reporting\r\n\r\nWhile we always strive to not have bug, we realize they will come up,\r\nand appreciate help in identifying them so they can be corrected. If\r\nyou believe you have found such a thing, please tell us:\r\n\r\n* which version of Tim you're using\r\n* which version of Ruby you're using.\r\n* How to reproduce it. Bugs with a failing test in a\r\n  {pull request}[https://help.github.com/articles/using-pull-requests] get\r\n  extra points, though a description and stack trace, if appropriate,\r\n  would be a minimum requirement for the issue to receive attention.\r\n  (And of course, submitting a pull request with proper tests that also\r\n  fixes the bug will get the fix in a release quicker yet!)\r\n\r\n## License\r\n\r\nImage Management Engine is released under the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}